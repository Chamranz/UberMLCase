from fastapi import FastAPI, HTTPException, Query, Request
from predictor import load_model, predicted_prices
from fastapi.responses import HTMLResponse
from schemas import BatchPredictionRequest, PredictionResponse
from typing import List

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
app = FastAPI(
    title="Uber Price Predictor API",
    description="–ü—Ä–µ–¥—Å–∫–∞–∂–∏ —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏ –≤ Uber –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞.",
    version="1.0.0",
    contact={
        "name": "Your Name",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â–µ–µ –∏–º—è –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Å–µ—Ä–≤–∏—Å
        "email": "your_email@example.com"  # –û–±—â–∏–π email
    }
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
model = load_model()

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
@app.get("/", tags=["Health Check"])
def read_root():
    return {"message": "üöó Uber Price Predictor is running!"}

# –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
@app.post("/api/predict/", response_model=PredictionResponse, tags=["Predictions"])
def predict(request: BatchPredictionRequest):
    try:
        features_list = [item.dict() for item in request.data]
        predictions = predicted_prices(model, features_list)
        formatted_predictions = [f"{p:.2f} $" for p in predictions]
        print(formatted_predictions)
        return {"predictions": formatted_predictions}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")


# –§–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@app.get("/predict/form/", response_class=HTMLResponse, tags=["UI"])
async def get_form():
    html_content = """
    <html>
        <head>
            <title>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ Uber</title>
            <style>
                body { font-family: Arial; padding: 20px; background-color: #f8f9fa; }
                h1 { color: #343a40; }
                label { display: block; margin-top: 10px; }
                input { width: 300px; padding: 5px; }
                button { margin-top: 15px; padding: 10px 20px; }
                .result { margin-top: 20px; font-size: 18px; color: green; }
            </style>
        </head>
        <body>
            <h1>–ü—Ä–µ–¥–∏–∫—Ç–æ—Ä —Ü–µ–Ω—ã –ø–æ–µ–∑–¥–∫–∏</h1>
            <form id="predictForm">
                <label>Pickup Latitude:
                    <input type="number" step="any" name="pickup_latitude" required />
                </label>
                <label>Pickup Longitude:
                    <input type="number" step="any" name="pickup_longitude" required />
                </label>
                <label>Dropoff Latitude:
                    <input type="number" step="any" name="dropoff_latitude" required />
                </label>
                <label>Dropoff Longitude:
                    <input type="number" step="any" name="dropoff_longitude" required />
                </label>
                <label>Passenger Count:
                    <input type="number" min="1" max="10" name="passenger_count" required />
                </label>
                <button type="submit">–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É</button>
            </form>
            <div class="result" id="result"></div>

            <script>
    document.getElementById('predictForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
        const data = {};
        formData.forEach((value, key) => {
            if (key === 'passenger_count') {
                data[key] = parseInt(value);
            } else {
                data[key] = parseFloat(value);
            }
        });

        const response = await fetch('/api/predict/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ data: [data] })  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤ –≤–Ω—É—Ç—Ä–∏ data
        });

        if (!response.ok) {
            const errorData = await response.json();
            document.getElementById('result').innerText = 
                '–û—à–∏–±–∫–∞: ' + (errorData.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            return;
        }

        const result = await response.json();
        document.getElementById('result').innerText = 
            '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞: $' + result.predictions[0];
    });
</script>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)
